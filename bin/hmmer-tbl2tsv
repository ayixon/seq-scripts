#!/usr/bin/env perl
# Created: 09 Jan 2019
# Author: Thomas Hackl, thackl@lim4.de
use warnings;
use strict;
use Getopt::Long  qw(:config no_ignore_case bundling);
use Data::Dumper;

GetOptions (
    "out|o=s" => sub { '-' ne $_[1] and open(STDOUT, '>', $_[1]) || die $! },
    "no-header|H!" => \(my $no_header),
    "help|h!" => \(my $help),
    "debug|D!" => \(my $debug),
) or die("Error in command line arguments\n");

if ($help){
    print "Usage: hmmtbl2tsv.pl < in > out\n";
    printf " %-19s  %s\n", "-o/--out", "write to this file [STDOUT]";
    printf " %-19s  %s\n", "-H/--no-header", "omit header line";
    printf " %-19s  %s\n", "-h/--help", "show this help";
    printf " %-19s  %s\n", "-D/--debug", "show debug messages";
    exit 0;
}

my $argv = "";
my $n_col;

my @tbl_col_names = qw(target_name target_accession query_name query_accession
                       evalue score bias
                       dom_evalue dom_score dom_bias
                       exp reg clu ov env dom rep inc description_of_target);
my @domtbl_col_names = qw(target_name target_accession tlen query_name query_accession qlen
                          evalue score bias
                          dom_i dom_n c_evalue i_evalue dom_score dom_bias
                          hmm_from hmm_to ali_from ali_to env_from env_to acc description_of_target);
my @nhmm_col_names = qw(target_name target_accession query_name query_accession
                        hmm_from hmm_to ali_from ali_to env_from env_to mod_len strand
                        evalue score bias description_of_target);
my @col_names;

while (<>) {
    if ($ARGV ne $argv) { # new file
        $argv = $ARGV;
        my $head = <>;
        my $sep = <>;
        $head =~ s/^# +//;
        $head =~ s/ name/_name/g;
        $head =~ s/ of target/_of_target/g;
        my @head = split(/ +/, $head);
        $n_col = @head; # tbl and domtbl have different number of cols

        if ($n_col == 19){
            print STDERR "processing $argv as tbl w/ $n_col columns\n";
            @col_names = @tbl_col_names;
        }elsif ($n_col == 23){
            print STDERR "processing $argv as domtbl w/ $n_col columns\n";
            @col_names = @domtbl_col_names;
        }elsif ($n_col == 16) {
            print STDERR "processing $argv as nhmmtbl w/ $n_col columns\n";
            @col_names = @nhmm_col_names;
        }else {
            die "expecting file with either 19 (tbl) or 23 (domtbl) columns, not $n_col."
        }

        print join("\t", @col_names),"\n" unless $no_header;
        next;
    }
    next if /^#/; # comments at end of file
    # use fixed number of cols to allow spaces in description (last col)
    print join("\t", split(/ +/, $_, $n_col));
}
